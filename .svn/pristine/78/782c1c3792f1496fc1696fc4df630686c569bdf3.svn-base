///////////////////////////////////////////////////////////////////////////
// Copyright © 2019 zhongsong. All Rights Reserved.
// 模块描述:水文要素
///////////////////////////////////////////////////////////////////////////
define([
	'dojo/_base/declare',
	'dojo/_base/lang',
	'dojo/_base/array',
	'dojo/_base/html',
	'dojo/topic',
	'jimu/BaseWidget'
],
	function (declare,
		lang,
		array,
		html,
		topic,
		BaseWidget
	) {
		return declare([BaseWidget], {
			baseClass: 'jimu-widget-Hydrology',
			name: 'Hydrology',
			entityIds: [],
			// 保存鼠标点击事件
			hydroHandler3D: null,
			startup: function () {
				this.inherited(arguments);
				// 暴露在外的接口
				topic.subscribe("closehydrology", lang.hitch(this, this.closeHydro));
				var that = this;
				$.ajax({
					url: "http://www.sw797.com:82/blade-ycreal/site/selectAllList",
					type: "post",
					dataType: "json",
					async: false,
					success: function (data) {
						var result = [];
						for (var i = 0; i < data.data.length; i++) {
							result.push(data.data[i]);
						}

						that.data = result;
					}
				})
				// 存放实体的空数组
				var dataListEntity = [];
				// 存放经纬度的空数组
				var canx = [];
				var cany = [];
				// 存放文本的空数组
				var text = [];
				// 存放ID的空数组
				var siteId = [];
				var hydro_data = this.data;
				var hydro_code = "?code=";
				hydro_data.forEach(function (item, index) {
					// 拼接请求参数
					hydro_code += item.siteCode + ',';
					canx.push(item.lgtd);
					cany.push(item.lttd);
					text.push(item.siteName);
					siteId.push(item.siteId);
					dataListEntity.push(item.siteId)
				})
				// 注册点击事件
				console.log(hydro_code)
				$(".jimu-widget-Hydrology .hydro-list-mean li a").click(function () {
					that.entityIds = [];
					// 删除实体
					dataListEntity.forEach(function (item, index) {
						that.map.entities.removeById(item);
					})
					// 检测当前点击的A标签是否已经拥有类名ON，如已经如有，则删除地图上的实体，并且移除类名
					if ($(this).hasClass('on')) {
						// 并且删除实体
						dataListEntity.forEach(function (item, index) {
							that.map.entities.removeById(item);
						})
						$(this).removeClass('on');
						return;
					}
					// 当前点击的a标签添加类名，兄弟移除类名
					$(this).addClass('on').parent().siblings().children('a').removeClass('on');
					// ind 记录当前点击的下标
					var ind = $(this).parent().index();
					if (ind == 0) {
						$.ajax({
							url: `http://www.sw797.com:82/blade-ycreal/pptnr/drpOne${hydro_code}`,
							type: "get",
							dataType: 'json',
							success: function (data) {
								console.log(data, hydro_data);
								var data = data.data;
								that.createHydroTable({ name: text, data: data, num: ind })
								for (var i = 0; i < data.length; i++) {
									if (data[i].site_name) {
										that.whiteEntities({
											id: siteId[i],
											name: text[i],
											x: canx[i],
											y: cany[i],
											img: './images/hy0.png',
											text: text[i],
											het: 20
										})
									}
									var fieldName = data[i].DRP;
									if (fieldName == null) {
										fieldName = 0;
									}
									// 添加图层，调用方法，传参数
									that.entitys({
										id: siteId[i],
										name: text[i],
										x: canx[i],
										y: cany[i],
										img: './images/js.png',
										text: fieldName + " mm" + '\n' + text[i],
										labOutColor: Cesium.Color.fromBytes(103, 188, 214),
										het: 20
									})
								}
							}
						})
					} else if (ind == 1 || ind == 2) {
						$.ajax({
							url: `http://www.sw797.com:82/blade-ycreal/riverr/rthyinfo${hydro_code}`,
							type: 'post',
							dataType: "json",
							success: function (data) {
								console.log(data, 1, 2)
								var data = data.data;
								that.createHydroTable({ name: text, data: data, num: ind })
								// 定义颜色变量
								var colorSl;
								// 定义背景图变量
								var imgUrl;
								// 定义文字变量
								var field_q_j;
								for (var i = 0; i < data.length; i++) {
									if (data[i].site_name) {
										if (ind == 1) {
											var whiteUrl = './images/hy1.png';
										} else {
											var whiteUrl = './images/hy2.png';
										}
										that.whiteEntities({
											id: siteId[i],
											name: text[i],
											x: canx[i],
											y: cany[i],
											img: whiteUrl,
											text: text[i],
											het: 20
										})
									}
									if (!data[i].Z || !data[i].Q) {
										continue;
									}
									if (ind == 1) {
										field_q_j = data[i].Z;
										imgUrl = './images/swei.png';
										if (field_q_j > data[i].yjsw) {
											colorSl = Cesium.Color.RED
										} else {
											colorSl = Cesium.Color.SKYBLUE
										}
									} else if (ind == 2) {
										field_q_j = data[i].Q;
										imgUrl = './images/ll.png';
										if (field_q_j > data[i].yjll) {
											colorSl = Cesium.Color.RED
										} else {
											colorSl = Cesium.Color.SKYBLUE
										}
									}
									// 添加图层
									that.entitys({
										id: siteId[i],
										name: text[i],
										x: canx[i],
										y: cany[i],
										img: imgUrl,
										text: field_q_j + " M" + '\n' + text[i],
										labOutColor: colorSl,
										het: 20
									})
								}
							}
						})
					} else if (ind == 4) {
						$.ajax({
							url: `http://www.sw797.com:82/blade-ycreal/history/selectRealTimeByEv${hydro_code}`,
							type: "post",
							dataType: 'json',
							success: function (data) {
								console.log(data, 4);
								var data = data.data;
								that.createHydroTable({ name: text, data: data, num: ind })
								if (data == null) {
									return;
								}
								for (var j = 0; j < data.length; j++) {
									if (data[j].site_name) {
										that.whiteEntities({
											id: siteId[j],
											name: text[j],
											x: canx[j],
											y: cany[j],
											img: './images/hy4.png',
											text: text[j],
											het: 20
										})
									}
								}
								for (var i = 0; i < data.length; i++) {

									if (data[i].list) {
										var fieldName = data[i].list[0].sumEv;
										if (fieldName == 'undefined' || fieldName == null || fieldName == 0) {
											continue;
										}
										that.entitys({
											id: siteId[i],
											name: text[i],
											x: canx[i],
											y: cany[i],
											img: './images/zf.png',
											text: fieldName + "％" + '\n' + text[i],
											labOutColor: Cesium.Color.SKYBLUE,
											het: 20
										})
									} else {
										continue;
									}
								}
							}
						})
					} else if (ind == 5) {
						$.ajax({
							url: `http://www.sw797.com:82/blade-ycreal/soilr/selectRealTimeBySoil${hydro_code}`,
							type: "post",
							dataType: 'json',
							success: function (data) {
								console.log(data, 5);
								var data = data.data;
								that.createHydroTable({ name: text, data: data, num: ind })
								for (var i = 0; i < data.length; i++) {
									if (data[i].site_name) {
										that.whiteEntities({
											id: siteId[i],
											name: text[i],
											x: canx[i],
											y: cany[i],
											img: './images/hy5.png',
											text: text[i],
											het: 20
										})
									}
									var fieldName = data[i].srlslm;
									if (fieldName == 'undefined' || fieldName == null || fieldName == 0) {
										continue;
									}
									that.entitys({
										id: siteId[i],
										name: text[i],
										x: canx[i],
										y: cany[i],
										img: './images/sq.png',
										text: fieldName + "％" + '\n' + text[i],
										labOutColor: Cesium.Color.SKYBLUE,
										het: 20
									})
								}
							}
						})

					} else if (ind == 6 || ind == 7) {
						$.ajax({
							url: `http://www.sw797.com:82/blade-ycreal/tmpr/selectRealTimeByTmp${hydro_code}`,
							type: "GET",
							dataType: 'json',
							success: function (data) {
								console.log(data, 6, 7);
								var data = data.data;
								that.createHydroTable({ name: text, data: data, num: ind })
								for (var i = 0; i < data.length; i++) {
									if (data[i] == null) {
										continue;
									}
									if (ind == 6) {
										var fieldName = data[i].WTMP;
										var pictureurl = './images/sw.png';
										var whiteUrl = './images/hy6.png';
									} else {
										var fieldName = data[i].ATMP;
										var pictureurl = './images/jw.png';
										var whiteUrl = './images/hy7.png';
									}
									if (data[i].site_name) {
										that.whiteEntities({
											id: siteId[i],
											name: text[i],
											x: canx[i],
											y: cany[i],
											img: whiteUrl,
											text: text[i],
											het: 20
										})
									}
									if (fieldName == 'undefined' || fieldName == null || fieldName == 0) continue;
									that.entitys({
										id: siteId[i],
										name: text[i],
										x: canx[i],
										y: cany[i],
										img: pictureurl,
										text: fieldName + "℃" + '\n' + text[i],
										labOutColor: Cesium.Color.SKYBLUE,
										het: 20
									})
								}
							}
						})
					} else if (ind == 8) {
						$.ajax({
							url: `http://www.sw797.com:82/blade-ycreal/wq/selectWqRPage${hydro_code}`,
							type: "post",
							dataType: 'json',
							success: function (data) {
								console.log(data, 8);
								var data = data.data;
								that.createHydroTable({ name: text, data: data, num: ind })
								for (var i = 0; i < data.length; i++) {
									if (data[i].site_name) {
										that.whiteEntities({
											id: siteId[i],
											name: text[i],
											x: canx[i],
											y: cany[i],
											img: './images/hy8.png',
											text: text[i],
											het: 20
										})
									}
									if (data[i] == null) {
										continue;
									}
									var fieldName = data[i].WCHRCD;
									if (fieldName == 'undefined' || fieldName == null || fieldName == 0) continue;
									that.entitys({
										id: siteId[i],
										name: text[i],
										x: canx[i],
										y: cany[i],
										img: './images/sz.png',
										text: fieldName + "类" + '\n' + text[i],
										labOutColor: Cesium.Color.SKYBLUE,
										het: 20
									})
								}
							}
						})
					} else if (ind == 9) {
						$.ajax({
							url: `http://www.sw797.com:82/blade-ycreal/sedr/selectRealTimeBySed${hydro_code}`,
							type: "GET",
							dataType: 'json',
							success: function (data) {
								console.log(data, 9);
								var data = data.data;
								that.createHydroTable({ name: text, data: data, num: ind })
								for (var i = 0; i < data.length; i++) {
									if (data[i].site_name) {
										that.whiteEntities({
											id: siteId[i],
											name: text[i],
											x: canx[i],
											y: cany[i],
											img: './images/hy9.png',
											text: text[i],
											het: 20
										})
									}
									if (data[i] == null) {
										continue;
									}
									var fieldName = data[i].S;
									if (fieldName == 'undefined' || fieldName == null || fieldName == 0) continue;
									that.entitys({
										id: siteId[i],
										name: text[i],
										x: canx[i],
										y: cany[i],
										img: './images/ns.png',
										text: fieldName + "kg" + '\n' + text[i],
										labOutColor: Cesium.Color.SKYBLUE,
										het: 20
									})
								}
							}
						})
					} else if (ind == 3) {
						$.ajax({
							url: "widgets/Hydrology/riverInformation.json",
							type: "GET",
							dataType: "json",
							success: function (data) {
								console.log(data);
								that.createHydroTable({ data: data.features, num: ind });
								var data = eval(data); // eval() 计算字符串
								var enId, cnx, cny, fieldName;
								data.features.forEach(function (item, index) {
									// cnx, cny 定义经纬度，获取json文件里面定义好的
									cnx = item.geometry.center.x;
									cny = item.geometry.center.y;
									// 获取ID
									enId = item.ID;
									var dataTry = data.features.length;
									if (dataTry == 0) {
										return;
									}
									fieldName = item.fieldValues[8];
									if (fieldName == 'undefined' || fieldName == null || fieldName == 0) return;
									// 添加图层
									that.map.entities.add({
										id: enId,
										name: fieldName,
										position: Cesium.Cartesian3.fromDegrees(cnx, cny, 100),
										// 与实体相关的点
										point: {
											show: true,
											pixelSize: 8,
											color: Cesium.Color.fromBytes(13, 80, 143),
											outlineColor: Cesium.Color.fromBytes(13, 80, 143),
											outlineWidth: 2,
											disableDepthTestDistance: Number.POSITIVE_INFINITY
										},
										label: {
											show: true,
											text: fieldName,
											font: "700 16px '黑体'",
											color: Cesium.Color.fromBytes(13, 80, 143),
											backgroundColor: Cesium.Color.DEEPSKYBLUE,
											style: Cesium.LabelStyle.FILL_AND_OUTLINE,
											outlineWidth: 2,
											outlineColor: Cesium.Color.SKYBLUE,
											pixelOffset: new Cesium.Cartesian2(30, 0),
											scale: 0.8,
											disableDepthTestDistance: Number.POSITIVE_INFINITY
										}
									});
									// 将ID追加到存放ID值得数组里面
									dataListEntity.push(enId);
									that.groundwaterIds = dataListEntity;
									// 取消默认双击事件
									that.map.cesiumWidget.screenSpaceEventHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);
								})
								/**
								 * 动态添加气泡窗口
								 */
								that.hydroHandler3D = new Cesium.ScreenSpaceEventHandler(that.map.scene.canvas);
								var scene = that.map.scene;
								//绑定鼠标单击
								that.hydroHandler3D.setInputAction(function (movement) {
									var pick = scene.pick(movement.position);
									if (pick && pick.id) {
										var inv = pick.id._id;
										// 获取属性
										var feat = data.features[inv].fieldValues;
										// 内容
										var content = '<ul>' +
											'<li>' +
											'<p>测站位置</p><input type="text" name="" id="" value=' + feat[13] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>建站类型</p><input type="text" name="" id="" value=' + feat[14] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>站点类型</p><input type="text" name="" id="" value=' + feat[15] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>水文地质单元</p><input type="text" name="" id="" value=' + feat[19] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>地貌类型</p><input type="text" name="" id="" value=' + feat[20] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>地下水类型</p><input type="text" name="" id="" value=' + feat[21] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>监测层位</p><input type="text" name="" id="" value=' + feat[22] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>井管管材</p><input type="text" name="" id="" value=' + feat[23] + ' readonly="readonly" />' +
											'</li>' +
											'<li>' +
											'<p>管材标准(口径)MM</p><input type="text" name="" id="" value=' + feat[24] + ' readonly="readonly" />' +
											'</li>' +
											'</ul>';
										var obj = {
											position: movement.position,
											content: content
										};
										infoWindow(obj);

										function infoWindow(obj) {
											var picked = scene.pick(obj.position);
											if (Cesium.defined(picked)) {
												var id = Cesium.defaultValue(picked.id, picked.primitive.id);
												if (id instanceof Cesium.Entity) {
													$('#trackPopUpLink').empty();
													$('#trackPopUpLink').append(obj.content);

													function positionPopUp(c) {
														var x = c.x - ($('#trackPopUpContent').width()) / 2;
														var y = c.y - ($('#trackPopUpContent').height() + 30);
														$('#trackPopUpContent').css('transform', 'translate3d(' + x + 'px, ' + y + 'px, 0)');
													}
													var c = new Cesium.Cartesian2(obj.position.x, obj.position.y);
													$('#trackPopUp').show();
													positionPopUp(c); // Initial position
													$('.leaflet-popup-close-button').click(function () {
														$('#trackPopUp').hide();
														$('#trackPopUpLink').empty();
														return false;
													});
													return id;
												}
											}
										}
									} else {
										$('#trackPopUp').hide();
									}

								}, Cesium.ScreenSpaceEventType.LEFT_CLICK);
								//绑定地图移动
								that.hydroHandler3D.setInputAction(function (movement) {
									$('#trackPopUp').hide();
								}, Cesium.ScreenSpaceEventType.LEFT_UP);
								//绑定地图缩放
								that.hydroHandler3D.setInputAction(function (movement) {
									$('#trackPopUp').hide();
								}, Cesium.ScreenSpaceEventType.WHEEL);
								//绑定滚轮点击事件
								that.hydroHandler3D.setInputAction(function (movement) {
									$('#trackPopUp').hide();
								}, Cesium.ScreenSpaceEventType.MIDDLE_DOWN);



								// var height = Math.ceil(viewer.camera.positionCartographic.height);   //获取相机高度
								// viewer.scene.screenSpaceCameraController.minimumZoomDistance = -1000;//设置相机最小缩放距离,距离地表-1000米
							}
						})
						return;
					}
				})
			},

			onOpen: function () {
				//面板打开的时候触发 （when open this panel trigger）
				// $('.jimu-widget-Hydrology .num a').trigger('click');

			},

			onClose: function () {
				//面板关闭的时候触发 （when this panel is closed trigger）
			},

			onMinimize: function () {
				this.resize();
			},

			onMaximize: function () {
				this.resize();
			},

			resize: function () { },

			destroy: function () {
				//销毁的时候触发
				//todo
				//do something before this func
				this.inherited(arguments);
			},

			// 添加实体的方法
			entitys: function (object) {
				var that = this;
				if (this.entityIds != []) {
					this.entityIds.forEach(function (item, index) {
						if (item == object.id) {
							that.map.entities.removeById(item);
						}

					})
				}
				this.entityIds.push(object.id);
				this.map.entities.add({
					id: object.id, // 实体ID
					name: object.name, // 实体名称
					position: Cesium.Cartesian3.fromDegrees(object.x, object.y, 100), // x,y 实体经纬度
					billboard: {
						image: object.img, // img 与实体相关的图片
						show: true,
						width: 20,
						height: 20,
						heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
						disableDepthTestDistance: Number.POSITIVE_INFINITY
					},
					//字体标签样式
					label: {
						show: true,
						text: object.text, // text 与实体相关的文字
						font: "700 16px '黑体'",
						color: new Cesium.Color(0, 0, 0, 1),
						backgroundColor: Cesium.Color.DEEPSKYBLUE,
						style: Cesium.LabelStyle.FILL_AND_OUTLINE,
						outlineWidth: 2,
						outlineColor: object.labOutColor, // 文字轮廓的颜色
						verticalOrigin: Cesium.VerticalOrigin.CENTER,//垂直位置
						horizontalOrigin: Cesium.HorizontalOrigin.LEFT,//水平位置
						pixelOffset: new Cesium.Cartesian2(object.het, 0), // 文字位置
						heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
						disableDepthTestDistance: Number.POSITIVE_INFINITY
					}
				});
			},

			whiteEntities: function (object) {
				var that = this;
				if (this.entityIds != []) {
					this.entityIds.forEach(function (item, index) {
						if (item == object.id) {
							that.map.entities.removeById(item);
						}

					})
				}
				this.entityIds.push(object.id);
				this.map.entities.add({
					id: object.id, // 实体ID
					name: object.name, // 实体名称
					position: Cesium.Cartesian3.fromDegrees(object.x, object.y, 100), // x,y 实体经纬度
					billboard: {
						image: object.img, // img 与实体相关的图片
						show: true,
						color: Cesium.Color.fromBytes(147, 147, 147),
						width: 20,
						height: 20,
						heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
						disableDepthTestDistance: Number.POSITIVE_INFINITY
					},
					//字体标签样式
					label: {
						show: true,
						text: object.text, // text 与实体相关的文字
						font: "700 16px '黑体'",
						color: Cesium.Color.fromBytes(147, 147, 147),
						backgroundColor: Cesium.Color.WHITE,
						style: Cesium.LabelStyle.FILL_AND_OUTLINE,
						outlineWidth: 2,
						outlineColor: Cesium.Color.fromBytes(147, 147, 147), // 文字轮廓的颜色
						verticalOrigin: Cesium.VerticalOrigin.CENTER,//垂直位置
						horizontalOrigin: Cesium.HorizontalOrigin.LEFT,//水平位置
						pixelOffset: new Cesium.Cartesian2(object.het, 0), // 文字位置
						heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
						disableDepthTestDistance: Number.POSITIVE_INFINITY
					}
				});
			},

			deleteHydroEntitys: function (data) {
				for (var i = 0; i < data.length; i++) {
					this.map.entities.removeById(data[i].siteId)
				}
				if (this.groundwaterIds) {
					for (var i = 0; i < this.groundwaterIds.length; i++) {
						this.map.entities.removeById(this.groundwaterIds[i])
					}
				}
			},

			createHydroTable: function (data) {
				console.log(data.data);
				$('.jimu-widget-Hydrology .hydro-content table').empty();
				var tbody = $('<tbody></tbody>');
				var time = null;
				if (data.num == 0) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>降雨量(mm)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].TM) {
							time = data.data[index].TM + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].DRP}</td> <td>${time}</td>`))
					})
				} else if (data.num == 1) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>水位(M)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].TM) {
							time = data.data[index].TM + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].Z}</td> <td>${time}</td>`))
					})
				} else if (data.num == 2) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>流量(M)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].TM) {
							time = data.data[index].TM + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].Z ? data.data[index].Z : 0}</td> <td>${time}</td>`))
					})
				} else if (data.num == 4) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>蒸发(%)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].list) {
							time = data.data[index].list[0].tm + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].list ? data.data[index].list[0].sumEv : 0}</td> <td>${time}</td>`))
					})
				} else if (data.num == 5) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>墒情(%)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].tm) {
							time = data.data[index].tm + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].srlslm ? data.data[index].srlslm : ' '}</td> <td>${time}</td>`))
					})
				} else if (data.num == 6) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>水温(℃)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].TM) {
							time = data.data[index].TM + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].WTMP ? data.data[index].WTMP : ' '}</td> <td>${time}</td>`))
					})
				} else if (data.num == 7) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>岸温(℃)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].TM) {
							time = data.data[index].TM + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].ATMP ? data.data[index].ATMP : ' '}</td> <td>${time}</td>`))
					})
				} else if (data.num == 8) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>水质(类)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].CTM) {
							time = data.data[index].CTM + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].WCHRCD ? data.data[index].WCHRCD : ' '}</td> <td>${time}</td>`))
					})
				} else if (data.num == 9) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr><th>序号</th><th>站点名称</th><th>泥沙(kg)</th><th>时间</th></tr>'));
					data.name.forEach(function (item, index) {
						if (data.data[index].CTM) {
							time = data.data[index].CTM + "";
							time = time.substring(6, 16);
						} else {
							time = ' ';
						}
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item}</td> <td>${data.data[index].S ? data.data[index].S : ' '}</td> <td>${time}</td>`))
					})
				} else if (data.num == 3) {
					$('.jimu-widget-Hydrology .hydro-content .thead table').append($('<thead></thead>').html('<tr> <th>序号</th> <th>站点名称</th> <th>地貌类型</th> <th>地下水类型</th> </tr>'));
					data.data.forEach(function (item, index) {
						tbody.append($('<tr></tr>').html(`<td>${index + 1}</td> <td>${item.fieldValues[8]}</td> <td>${item.fieldValues[20]}</td> <td>${item.fieldValues[21]}</td>`))
					})
				} 
				$('.jimu-widget-Hydrology .hydro-content .tbody table').append(tbody);
			},

			closeHydro: function (item) {
				console.log(item);
				if (item == this.name) {
					$('.jimu-widget-Hydrology').stop().hide();
					this.deleteHydroEntitys(this.data);
					if ($('ul li a').hasClass('on')) {
						$('ul li a').removeClass('on');
					}
					if (this.hydroHandler3D != null) 
					this.hydroHandler3D.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);
				}
			}
		});
	});